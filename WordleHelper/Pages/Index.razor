@page "/"
@inject IWordleHelperLogic _wordleHelperLogic

<PageTitle>Wordle Helper</PageTitle>

<EditForm Model="@model" OnValidSubmit="GetSolutions">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudText>Do you want to play Wordle, but you are not a human dictionary?</MudText>
                <MudText>This is the for you! Wordle Helper will help you find words, but not the one solution.</MudText>
            </MudPaper>
            <MudCard Class="my-4">
                <MudCardContent>
                    <MudTextField Label="Skeleton" HelperText="Input letters you know with unknowns being '_'. (__zzy)"
                                  @bind-Value="model.Skeleton" For="@(() => model.Skeleton)" MaxLength=5 />

                    <MudTextField Label="Blocked Letters" HelperText="Letters you know the answer does not contain. (efg)"
                                  @bind-Value="model.BlockedLetters" For="@(() => model.BlockedLetters)" />

                    <MudTextField Label="Confirmed Letters" HelperText="Letters you know the answer must contain. (efg)"
                                  @bind-Value="model.ConfirmedLetters" For="@(() => model.BlockedLetters)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Get Solutions</MudButton>
                </MudCardActions>
            </MudCard>
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.subtitle1">Examples</MudText>
                <MudText>Here is sample inputs and what words they might produce.</MudText>
                <MudText>Skeleton input: "__zzy"</MudText>
                <MudText>Blocked Words input: "j"</MudText>
                <MudText>Would Produce: "fizzy"</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle1">Solutions: (@Solutions.Count())</MudText>
                @if (success)
                {
                    @foreach (var solution in Solutions)
                    {
                        if (masked)
                        {
                            <MudText>*****</MudText>
                        }
                        else
                        {
                            <MudText>@solution</MudText>
                        }
                    }

                    <MudCardActions>
                        @if (Solutions.Count() == 0)
                        {
                            <MudText Color="@Color.Error">No Solution Could Be Found.</MudText>
                        }
                        else if (displayMaskButton)
                        {
                            <MudText Color="@Color.Error">Solutions with Less Than 10 Answers at Automatically Masked.</MudText>
                            <MudButton OnClick="ToggleMasked" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@maskButtonText</MudButton>
                        }
                    </MudCardActions>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private WordleHelperInput model = new WordleHelperInput();
    private bool success;
    private IEnumerable<string> Solutions { get; set; } = new List<string>();
    private bool masked = false;
    private string maskButtonText = "Hide Masked Solutions";
    private bool displayMaskButton = false;

    protected override async Task OnInitializedAsync()
    {
        await _wordleHelperLogic.GetWords();
    }

    void ToggleMasked()
    {
        if (masked)
        {
            masked = false;
            maskButtonText = "Hide Masked Solutions";
        }
        else
        {
            masked = true;
            maskButtonText = "Show Masked Solutions";
        }
        StateHasChanged();
    }

    void GetSolutions()
    {
        success = true;
        Solutions = _wordleHelperLogic.GetSolutions(model);
        displayMaskButton = false;
        masked = false;
        if (Solutions.Count() <= 10)
        {
            masked = true;
            displayMaskButton = true;
        }
        StateHasChanged();
    }
}