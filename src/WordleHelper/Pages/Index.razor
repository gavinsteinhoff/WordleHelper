@page "/"
@using WordleHelper.Core
@inject IWordleHelperLogic _wordleHelperLogic

<PageTitle>Wordle Helper</PageTitle>

<EditForm Model="@_model" OnValidSubmit="GetSolutions">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudText>Do you want to play Wordle, but you are not a human dictionary?</MudText>
                <MudText>This is the for you! Wordle Helper will help you find words, but not the one solution.</MudText>
            </MudPaper>
            <MudPaper Class="pa-4 my-2">
                <MudTextField Label="Skeleton" HelperText="Input known letters with unknowns being '-'." @bind-Value="_model.Skeleton" For="@(() => _model.Skeleton)" MaxLength=5 />
                <MudTextField Label="Wrong Position Skeleton" HelperText="Input known letters but in their wrong positions. Include unknowns and known letters as '-'." @bind-Value="_model.WrongPositionSkeleton" For="@(() => _model.WrongPositionSkeleton)" MaxLength=5 />
                <MudTextField Label="Other Known Letters" HelperText="Input a list of any more known letters not in the Wrong Position Skeleton." @bind-Value="_model.KnownLetters" For="@(() => _model.KnownLetters)" />
                <MudTextField Label="Blocked Letters" HelperText="Input a list of letters you know the answer does not contain." @bind-Value="_model.BlockedLetters" For="@(() => _model.BlockedLetters)" />
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Get Solutions</MudButton>
            </MudPaper>
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.subtitle1">Examples</MudText>
                <MudText>Here is sample inputs and what words they might produce.</MudText>
                <MudText>Skeleton input: "sp---"</MudText>
                <MudText>Wrong Position Skeleton input: "--k--"</MudText>
                <MudText>Known Words input: "r"</MudText>
                <MudText>Blocked Words input: "i"</MudText>
                <MudText>Would Produce: "spark"</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle1">Solutions: (@(_solution.Count == 30 ? "30+" : _solution.Count))</MudText>
                @if (success)
                {
                    <MudText>
                        @((MarkupString)DisplaySolution())
                    </MudText>
                    <MudCardActions>
                        @if (_solution.Count == 0)
                        {
                            <MudText Color="@Color.Error">No Solution Could Be Found.</MudText>
                        }
                        else if (_solution.Count <= 10)
                        {
                            <MudText Color="@Color.Error">Solutions with Less Than 10 Answers at Automatically Masked.</MudText>
                            <MudButton OnClick="ToggleMasked" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@maskButtonText</MudButton>
                        }
                    </MudCardActions>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private WordleHelperInput _model = new WordleHelperInput();
    private WordleSolution _solution = new WordleSolution();

    private bool success;
    private bool masked = false;
    private string maskButtonText = "Hide Masked Solutions";

    protected override async Task OnInitializedAsync()
    {
        await _wordleHelperLogic.GetWords();
    }

    string DisplaySolution() => masked ? "*****" : _solution.SolutionText;

    void ToggleMasked()
    {
        if (masked)
        {
            masked = false;
            maskButtonText = "Hide Masked Solutions";
        }
        else
        {
            masked = true;
            maskButtonText = "Show Masked Solutions";
        }
        StateHasChanged();
    }

    void GetSolutions()
    {
        success = true;
        _solution = _wordleHelperLogic.GetSolutions(_model);
        masked = false;
        if (_solution.Count <= 10)
        {
            masked = true;
        }
        StateHasChanged();
    }
}